private void UpdateDataGrivTable(bool параметр)
        {
            DataTable table = new DataTable(); bool smej = false;
            dataGridView1.DataSource = null;
            dataGridView1.DataSource = table;
            dataGridView1.ColumnHeadersVisible = false;
            int len_columns = thisnod.props[0].values.Count + 1, rows;
            try
            {
                rows = thisnod.props.Count + thisnod.connects_in.Count;
                smej = true;
            }
            catch
            {
                rows = thisnod.props.Count;
            }
            GridCellColor[,] gridcell = new GridCellColor[rows, len_columns + 1];
            int i = 0;
            List<Node_struct> list = tmplistnodes;

            for (i = 0; i < len_columns; i++)
            {
                table.Columns.Add("");
            }
            for (i = 0; i < thisnod.connects_in.Count; i++)
            {
                int id = thisnod.connects_in[i].ID;
                for (int k = 0; k < list.Count; k++)
                {
                    if (id == list[i].ID)
                    {
                        id = i;
                        break;
                    }
                }
                table.Rows.Add();
                table.Rows[i][0] = list[id].Name;
                dataGridView1.Rows[i].Cells[0].ReadOnly = true;
                gridcell[i, 0].setvalue(i, 0, Color.Red);
                dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.Red;
            }
            int j = 0;
            for (i = i + 0, j = 0; i < rows; i++, j++)
            {
                table.Rows.Add();
                table.Rows[i][0] = thisnod.props[j].name;
                dataGridView1.Rows[i].Cells[0].ReadOnly = true;
                gridcell[i, 0].setvalue(i, 0, Color.LightGreen);
                dataGridView1.Rows[i].Cells[0].Style.BackColor = Color.LightGreen;
            }
            //заполнены строки и столбцы. Перехожу к заполнению самой матрицы;
            rows = rows - thisnod.props.Count;

            MatrixСмежная[][] mat = getMatrixСмежность(thisnod, rows, len_columns - 1, tmplistnodes);
            for (i = 0; i < rows; i++)
            {
                for (j = 1; j < len_columns; j++)
                {
                    table.Rows[i][j] = mat[i][j - 1].property.name;
                    dataGridView1.Rows[i].Cells[j].ReadOnly = true;
                    gridcell[i, j].setvalue(i, j, Color.LightBlue);
                    dataGridView1.Rows[i].Cells[j].Style.BackColor = Color.LightBlue;
                }
            }
            if (thisnod.connects_in.Count > 0 || new Node().getProvBoolПроверкаИзвестия(list))
            {
                //list = new NodeValueMathUp().getMathNodesAll(list);
                table.Columns.Add("Вероятности");
                for (i = 0; i < thisnod.props.Count; i++)
                {
                    gridcell[i + rows, len_columns].setvalue(i, j, Color.MistyRose);
                    table.Rows[i + rows]["Вероятности"] = Math.Round(thisnod.props[i].value_editor, 4);
                }
                for (i = 0; i < table.Rows.Count; i++)
                    for (j = 0; j < table.Columns.Count; j++)
                    {
                        dataGridView1.Rows[i].Cells[j].Style.BackColor = gridcell[i, j].color;
                    }
            }
            for (i = 0; i < thisnod.props.Count; i++)
            {
                for (j = 0; j < thisnod.props[i].values.Count; j++)
                {
                    table.Rows[i + rows][j + 1] = thisnod.props[i].values[j];
                }
            }
        }